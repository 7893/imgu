{
  "Comment": "State machine to sync oldest Unsplash photos (receives initial state from caller), process in batches, wait between batches, with breakpoint resume.",
  "StartAt": "FetchUnsplashPage",
  "States": {
    "FetchUnsplashPage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-west-2:015590450538:function:images_20250329",
        "Payload": {
          "action": "FETCH_UNSPLASH_PAGE",
          "iteratorConfig": {
            "CurrentPage.$": "$.iterator.currentPage",
            "BatchSize.$": "$.iterator.batchSize"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [ "States.ALL" ],
          "Next": "SyncFailed",
          "ResultPath": "$.errorInfo"
        }
      ],
      "ResultPath": "$.fetchResult",
      "Next": "CheckIfPhotosReturned"
    },
    "CheckIfPhotosReturned": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.fetchResult.Payload.photos",
              "IsPresent": true
            },
            {
              "Variable": "$.fetchResult.Payload.photos[0]",
              "IsPresent": true
            }
          ],
          "Next": "ProcessImageBatch"
        }
      ],
      "Default": "SyncComplete"
    },
    "ProcessImageBatch": {
      "Type": "Map",
      "InputPath": "$.fetchResult.Payload.photos",
      "ItemsPath": "$",
      "MaxConcurrency": 5,
      "ResultPath": null,
      "Iterator": {
        "StartAt": "CheckIfPhotoExists",
        "States": {
          "CheckIfPhotoExists": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "arn:aws:lambda:us-west-2:015590450538:function:images_20250329",
              "Payload": {
                "action": "CHECK_PHOTO_EXISTS",
                "id.$": "$.id"
              }
            },
            "Catch": [
              {
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.errorInfo",
                "Next": "ProcessPhotoFailed"
              }
            ],
            "ResultPath": "$.existsResult",
            "Next": "DoesPhotoExistChoice"
          },
          "DoesPhotoExistChoice": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.existsResult.Payload.exists",
                "BooleanEquals": true,
                "Next": "SkipPhoto"
              }
            ],
            "Default": "DownloadAndStore"
          },
          "DownloadAndStore": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "arn:aws:lambda:us-west-2:015590450538:function:images_20250329",
              "Payload": {
                 "action": "DOWNLOAD_AND_STORE",
                 "id.$": "$.id",
                 "urls.$": "$.urls",
                 "topics.$": "$.topics",
                 "tags.$": "$.tags",
                 "width.$": "$.width",
                 "height.$": "$.height"
              }
            },
            "Catch": [
              {
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.errorInfo",
                "Next": "ProcessPhotoFailed"
              }
            ],
            "ResultPath": "$.downloadResult",
            "End": true
          },
          "SkipPhoto": {
            "Type": "Pass",
            "Result": { "status": "skipped", "reason": "already exists" },
            "ResultPath": "$.downloadResult",
            "End": true
          },
          "ProcessPhotoFailed": {
            "Type": "Pass",
            "Result": { "status": "failed", "errorInfo.$": "$.errorInfo" },
            "ResultPath": "$.downloadResult",
            "Comment": "Processing for a single photo failed within the Map state.",
            "End": true
          }
        }
      },
      "Next": "UpdateSyncProgress"
    },
    "UpdateSyncProgress": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-west-2:015590450538:function:images_20250329",
        "Payload": {
          "action": "UPDATE_SYNC_STATE",
          "payload": {
            "syncType": "UNSPLASH_OLDEST_SYNC",
            "processedPage.$": "$.iterator.currentPage"
          }
        }
      },
      "ResultPath": null,
      "Catch": [
         {
           "ErrorEquals": ["States.ALL"],
           "Comment": "Log state update failure but continue",
           "ResultPath": "$.updateStateError",
           "Next": "WaitBeforeNextPage"
         }
       ],
      "Next": "WaitBeforeNextPage"
    },
    "WaitBeforeNextPage": {
      "Type": "Wait",
      "SecondsPath": "$.iterator.waitTimeSeconds",
      "Next": "IncrementPage"
    },
    "IncrementPage": {
      "Type": "Pass",
      "Parameters": {
        "currentPage.$": "States.MathAdd($.iterator.currentPage, 1)",
        "batchSize.$": "$.iterator.batchSize",
        "waitTimeSeconds.$": "$.iterator.waitTimeSeconds"
      },
      "ResultPath": "$.iterator",
      "Next": "FetchUnsplashPage"
    },
    "SyncComplete": {
      "Type": "Succeed"
    },
    "SyncFailed": {
      "Type": "Fail",
      "Comment": "The sync process failed due to an unrecoverable error.",
      "Error": "SyncProcessFailedError",
      "CausePath": "$.errorInfo.Cause"
    }
  }
}
